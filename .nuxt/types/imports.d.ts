// Generated by auto imports
export {}
declare global {
  const { abortNavigation, addRouteMiddleware, defineNuxtRouteMiddleware, navigateTo, setPageLayout, useRoute, useRouter }: typeof import('../../node_modules/nuxt/dist/app/composables/router')
  const { asyncComputed, autoResetRef, computedAsync, computedEager, computedInject, computedWithControl, controlledComputed, controlledRef, createEventHook, createGlobalState, createInjectionState, createReactiveFn, createReusableTemplate, createSharedComposable, createTemplatePromise, createUnrefFn, debouncedRef, debouncedWatch, eagerComputed, extendRef, ignorableWatch, injectLocal, isDefined, makeDestructurable, onClickOutside, onKeyStroke, onLongPress, onStartTyping, pausableWatch, provideLocal, reactify, reactifyObject, reactiveComputed, reactiveOmit, reactivePick, refAutoReset, refDebounced, refDefault, refThrottled, refWithControl, resolveRef, resolveUnref, syncRef, syncRefs, templateRef, throttledRef, throttledWatch, toReactive, tryOnBeforeMount, tryOnBeforeUnmount, tryOnMounted, tryOnScopeDispose, tryOnUnmounted, unrefElement, until, useActiveElement, useAnimate, useArrayDifference, useArrayEvery, useArrayFilter, useArrayFind, useArrayFindIndex, useArrayFindLast, useArrayIncludes, useArrayJoin, useArrayMap, useArrayReduce, useArraySome, useArrayUnique, useAsyncQueue, useAsyncState, useBase64, useBattery, useBluetooth, useBreakpoints, useBroadcastChannel, useBrowserLocation, useCached, useClipboard, useClipboardItems, useCloned, useColorMode, useConfirmDialog, useCounter, useCssVar, useCurrentElement, useCycleList, useDark, useDateFormat, useDebounce, useDebounceFn, useDebouncedRefHistory, useDeviceMotion, useDeviceOrientation, useDevicePixelRatio, useDevicesList, useDisplayMedia, useDocumentVisibility, useDraggable, useDropZone, useElementBounding, useElementByPoint, useElementHover, useElementSize, useElementVisibility, useEventBus, useEventListener, useEventSource, useEyeDropper, useFavicon, useFileDialog, useFileSystemAccess, useFocus, useFocusWithin, useFps, useFullscreen, useGamepad, useGeolocation, useIdle, useInfiniteScroll, useIntersectionObserver, useInterval, useIntervalFn, useKeyModifier, useLastChanged, useLocalStorage, useMagicKeys, useManualRefHistory, useMediaControls, useMediaQuery, useMemoize, useMemory, useMounted, useMouse, useMouseInElement, useMousePressed, useMutationObserver, useNavigatorLanguage, useNetwork, useNow, useObjectUrl, useOffsetPagination, useOnline, usePageLeave, useParallax, useParentElement, usePerformanceObserver, usePermission, usePointer, usePointerLock, usePointerSwipe, usePreferredColorScheme, usePreferredContrast, usePreferredDark, usePreferredLanguages, usePreferredReducedMotion, usePrevious, useRafFn, useRefHistory, useResizeObserver, useScreenOrientation, useScreenSafeArea, useScriptTag, useScroll, useScrollLock, useSessionStorage, useShare, useSorted, useSpeechRecognition, useSpeechSynthesis, useStepper, useStorageAsync, useStyleTag, useSupported, useSwipe, useTemplateRefsList, useTextDirection, useTextSelection, useTextareaAutosize, useThrottle, useThrottleFn, useThrottledRefHistory, useTimeAgo, useTimeout, useTimeoutFn, useTimeoutPoll, useTimestamp, useToNumber, useToString, useToggle, useTransition, useUrlSearchParams, useUserMedia, useVModel, useVModels, useVibrate, useVirtualList, useWakeLock, useWebNotification, useWebSocket, useWebWorker, useWebWorkerFn, useWindowFocus, useWindowScroll, useWindowSize, watchArray, watchAtMost, watchDebounced, watchDeep, watchIgnorable, watchImmediate, watchOnce, watchPausable, watchThrottled, watchTriggerable, watchWithFilter, whenever }: typeof import('../../node_modules/@vueuse/core')
  const { callOnce }: typeof import('../../node_modules/nuxt/dist/app/composables/once')
  const { cancelIdleCallback, requestIdleCallback }: typeof import('../../node_modules/nuxt/dist/app/compat/idle-callback')
  const { clearError, createError, isNuxtError, showError, useError }: typeof import('../../node_modules/nuxt/dist/app/composables/error')
  const { clearNuxtData, refreshNuxtData, useAsyncData, useLazyAsyncData, useNuxtData }: typeof import('../../node_modules/nuxt/dist/app/composables/asyncData')
  const { clearNuxtState, useState }: typeof import('../../node_modules/nuxt/dist/app/composables/state')
  const { computed, customRef, defineAsyncComponent, defineComponent, effect, effectScope, getCurrentInstance, getCurrentScope, h, hasInjectionContext, inject, isProxy, isReactive, isReadonly, isRef, isShallow, markRaw, mergeModels, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onScopeDispose, onServerPrefetch, onUnmounted, onUpdated, onWatcherCleanup, provide, proxyRefs, reactive, readonly, ref, resolveComponent, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, toValue, triggerRef, unref, useAttrs, useCssModule, useCssVars, useId, useModel, useShadowRoot, useSlots, useTemplateRef, useTransitionState, watch, watchEffect, watchPostEffect, watchSyncEffect, withCtx, withDirectives, withKeys, withMemo, withModifiers, withScopeId }: typeof import('vue')
  const { defineAppConfig, defineNuxtPlugin, definePayloadPlugin, tryUseNuxtApp, useNuxtApp, useRuntimeConfig }: typeof import('../../node_modules/nuxt/dist/app/nuxt')
  const { defineLazyHydrationComponent }: typeof import('../../node_modules/nuxt/dist/app/composables/lazy-hydration')
  const { defineNuxtComponent }: typeof import('../../node_modules/nuxt/dist/app/composables/component')
  const { defineNuxtLink }: typeof import('../../node_modules/nuxt/dist/app/components/nuxt-link')
  const { definePageMeta }: typeof import('../../node_modules/nuxt/dist/pages/runtime/composables')
  const { definePayloadReducer, definePayloadReviver, isPrerendered, loadPayload, preloadPayload }: typeof import('../../node_modules/nuxt/dist/app/composables/payload')
  const { getAppManifest, getRouteRules }: typeof import('../../node_modules/nuxt/dist/app/composables/manifest')
  const { injectHead, useHead, useHeadSafe, useSeoMeta, useServerHead, useServerHeadSafe, useServerSeoMeta }: typeof import('../../node_modules/nuxt/dist/app/composables/head')
  const { isVue2, isVue3 }: typeof import('../../node_modules/nuxt/dist/app/compat/vue-demi')
  const { onBeforeRouteLeave, onBeforeRouteUpdate, useLink }: typeof import('vue-router')
  const { onNuxtReady }: typeof import('../../node_modules/nuxt/dist/app/composables/ready')
  const { onPrehydrate, prerenderRoutes, setResponseStatus, useRequestEvent, useRequestFetch, useRequestHeader, useRequestHeaders, useResponseHeader }: typeof import('../../node_modules/nuxt/dist/app/composables/ssr')
  const { prefetchComponents, preloadComponents, preloadRouteComponents }: typeof import('../../node_modules/nuxt/dist/app/composables/preload')
  const { refreshCookie, useCookie }: typeof import('../../node_modules/nuxt/dist/app/composables/cookie')
  const { reloadNuxtApp }: typeof import('../../node_modules/nuxt/dist/app/composables/chunk')
  const { setInterval }: typeof import('../../node_modules/nuxt/dist/app/compat/interval')
  const { updateAppConfig, useAppConfig }: typeof import('../../node_modules/nuxt/dist/app/config')
  const { useAuth }: typeof import('../../../digital-agency/composables/useAuth')
  const { useCMS }: typeof import('../../../digital-agency/composables/useCMS')
  const { useFetch, useLazyFetch }: typeof import('../../node_modules/nuxt/dist/app/composables/fetch')
  const { useHydration }: typeof import('../../node_modules/nuxt/dist/app/composables/hydrate')
  const { useI18n }: typeof import('../../../digital-agency/composables/useI18n')
  const { useLoadingIndicator }: typeof import('../../node_modules/nuxt/dist/app/composables/loading-indicator')
  const { usePreviewMode }: typeof import('../../node_modules/nuxt/dist/app/composables/preview')
  const { useRequestURL }: typeof import('../../node_modules/nuxt/dist/app/composables/url')
  const { useRouteAnnouncer }: typeof import('../../node_modules/nuxt/dist/app/composables/route-announcer')
  const { useRuntimeHook }: typeof import('../../node_modules/nuxt/dist/app/composables/runtime-hook')
  const { useScript, useScriptClarity, useScriptCloudflareWebAnalytics, useScriptCrisp, useScriptEventPage, useScriptFathomAnalytics, useScriptGoogleAdsense, useScriptGoogleAnalytics, useScriptGoogleMaps, useScriptGoogleTagManager, useScriptHotjar, useScriptIntercom, useScriptLemonSqueezy, useScriptMatomoAnalytics, useScriptMetaPixel, useScriptNpm, useScriptPlausibleAnalytics, useScriptRybbitAnalytics, useScriptSegment, useScriptSnapchatPixel, useScriptStripe, useScriptTriggerConsent, useScriptTriggerElement, useScriptUmamiAnalytics, useScriptVimeoPlayer, useScriptXPixel, useScriptYouTubePlayer }: typeof import('../../node_modules/nuxt/dist/app/composables/script-stubs')
  const { useSiteSettings }: typeof import('../../../digital-agency/composables/useSiteSettings')
}
// for type re-export
declare global {
  // @ts-ignore
  export type { Component, ComponentPublicInstance, ComputedRef, DirectiveBinding, ExtractDefaultPropTypes, ExtractPropTypes, ExtractPublicPropTypes, InjectionKey, PropType, Ref, MaybeRef, MaybeRefOrGetter, VNode, WritableComputedRef } from 'vue'
  import('vue')
}
// for vue template auto import
type UnwrapRefs<T> = {
  [K in keyof T]: import('vue').UnwrapRef<T[K]>
}
namespace _ComponentCustomProperties {
  const { abortNavigation, addRouteMiddleware, defineNuxtRouteMiddleware, navigateTo, setPageLayout, useRoute, useRouter }: typeof import('../../node_modules/nuxt/dist/app/composables/router')
  const { asyncComputed, autoResetRef, computedAsync, computedEager, computedInject, computedWithControl, controlledComputed, controlledRef, createEventHook, createGlobalState, createInjectionState, createReactiveFn, createReusableTemplate, createSharedComposable, createTemplatePromise, createUnrefFn, debouncedRef, debouncedWatch, eagerComputed, extendRef, ignorableWatch, injectLocal, isDefined, makeDestructurable, onClickOutside, onKeyStroke, onLongPress, onStartTyping, pausableWatch, provideLocal, reactify, reactifyObject, reactiveComputed, reactiveOmit, reactivePick, refAutoReset, refDebounced, refDefault, refThrottled, refWithControl, resolveRef, resolveUnref, syncRef, syncRefs, templateRef, throttledRef, throttledWatch, toReactive, tryOnBeforeMount, tryOnBeforeUnmount, tryOnMounted, tryOnScopeDispose, tryOnUnmounted, unrefElement, until, useActiveElement, useAnimate, useArrayDifference, useArrayEvery, useArrayFilter, useArrayFind, useArrayFindIndex, useArrayFindLast, useArrayIncludes, useArrayJoin, useArrayMap, useArrayReduce, useArraySome, useArrayUnique, useAsyncQueue, useAsyncState, useBase64, useBattery, useBluetooth, useBreakpoints, useBroadcastChannel, useBrowserLocation, useCached, useClipboard, useClipboardItems, useCloned, useColorMode, useConfirmDialog, useCounter, useCssVar, useCurrentElement, useCycleList, useDark, useDateFormat, useDebounce, useDebounceFn, useDebouncedRefHistory, useDeviceMotion, useDeviceOrientation, useDevicePixelRatio, useDevicesList, useDisplayMedia, useDocumentVisibility, useDraggable, useDropZone, useElementBounding, useElementByPoint, useElementHover, useElementSize, useElementVisibility, useEventBus, useEventListener, useEventSource, useEyeDropper, useFavicon, useFileDialog, useFileSystemAccess, useFocus, useFocusWithin, useFps, useFullscreen, useGamepad, useGeolocation, useIdle, useInfiniteScroll, useIntersectionObserver, useInterval, useIntervalFn, useKeyModifier, useLastChanged, useLocalStorage, useMagicKeys, useManualRefHistory, useMediaControls, useMediaQuery, useMemoize, useMemory, useMounted, useMouse, useMouseInElement, useMousePressed, useMutationObserver, useNavigatorLanguage, useNetwork, useNow, useObjectUrl, useOffsetPagination, useOnline, usePageLeave, useParallax, useParentElement, usePerformanceObserver, usePermission, usePointer, usePointerLock, usePointerSwipe, usePreferredColorScheme, usePreferredContrast, usePreferredDark, usePreferredLanguages, usePreferredReducedMotion, usePrevious, useRafFn, useRefHistory, useResizeObserver, useScreenOrientation, useScreenSafeArea, useScriptTag, useScroll, useScrollLock, useSessionStorage, useShare, useSorted, useSpeechRecognition, useSpeechSynthesis, useStepper, useStorageAsync, useStyleTag, useSupported, useSwipe, useTemplateRefsList, useTextDirection, useTextSelection, useTextareaAutosize, useThrottle, useThrottleFn, useThrottledRefHistory, useTimeAgo, useTimeout, useTimeoutFn, useTimeoutPoll, useTimestamp, useToNumber, useToString, useToggle, useTransition, useUrlSearchParams, useUserMedia, useVModel, useVModels, useVibrate, useVirtualList, useWakeLock, useWebNotification, useWebSocket, useWebWorker, useWebWorkerFn, useWindowFocus, useWindowScroll, useWindowSize, watchArray, watchAtMost, watchDebounced, watchDeep, watchIgnorable, watchImmediate, watchOnce, watchPausable, watchThrottled, watchTriggerable, watchWithFilter, whenever }: typeof import('../../node_modules/@vueuse/core')
  const { callOnce }: typeof import('../../node_modules/nuxt/dist/app/composables/once')
  const { cancelIdleCallback, requestIdleCallback }: typeof import('../../node_modules/nuxt/dist/app/compat/idle-callback')
  const { clearError, createError, isNuxtError, showError, useError }: typeof import('../../node_modules/nuxt/dist/app/composables/error')
  const { clearNuxtData, refreshNuxtData, useAsyncData, useLazyAsyncData, useNuxtData }: typeof import('../../node_modules/nuxt/dist/app/composables/asyncData')
  const { clearNuxtState, useState }: typeof import('../../node_modules/nuxt/dist/app/composables/state')
  const { computed, customRef, defineAsyncComponent, defineComponent, effect, effectScope, getCurrentInstance, getCurrentScope, h, hasInjectionContext, inject, isProxy, isReactive, isReadonly, isRef, isShallow, markRaw, mergeModels, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onScopeDispose, onServerPrefetch, onUnmounted, onUpdated, onWatcherCleanup, provide, proxyRefs, reactive, readonly, ref, resolveComponent, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, toValue, triggerRef, unref, useAttrs, useCssModule, useCssVars, useId, useModel, useShadowRoot, useSlots, useTemplateRef, useTransitionState, watch, watchEffect, watchPostEffect, watchSyncEffect, withCtx, withDirectives, withKeys, withMemo, withModifiers, withScopeId }: typeof import('vue')
  const { defineAppConfig, defineNuxtPlugin, definePayloadPlugin, tryUseNuxtApp, useNuxtApp, useRuntimeConfig }: typeof import('../../node_modules/nuxt/dist/app/nuxt')
  const { defineLazyHydrationComponent }: typeof import('../../node_modules/nuxt/dist/app/composables/lazy-hydration')
  const { defineNuxtComponent }: typeof import('../../node_modules/nuxt/dist/app/composables/component')
  const { defineNuxtLink }: typeof import('../../node_modules/nuxt/dist/app/components/nuxt-link')
  const { definePageMeta }: typeof import('../../node_modules/nuxt/dist/pages/runtime/composables')
  const { definePayloadReducer, definePayloadReviver, isPrerendered, loadPayload, preloadPayload }: typeof import('../../node_modules/nuxt/dist/app/composables/payload')
  const { getAppManifest, getRouteRules }: typeof import('../../node_modules/nuxt/dist/app/composables/manifest')
  const { injectHead, useHead, useHeadSafe, useSeoMeta, useServerHead, useServerHeadSafe, useServerSeoMeta }: typeof import('../../node_modules/nuxt/dist/app/composables/head')
  const { isVue2, isVue3 }: typeof import('../../node_modules/nuxt/dist/app/compat/vue-demi')
  const { onBeforeRouteLeave, onBeforeRouteUpdate, useLink }: typeof import('vue-router')
  const { onNuxtReady }: typeof import('../../node_modules/nuxt/dist/app/composables/ready')
  const { onPrehydrate, prerenderRoutes, setResponseStatus, useRequestEvent, useRequestFetch, useRequestHeader, useRequestHeaders, useResponseHeader }: typeof import('../../node_modules/nuxt/dist/app/composables/ssr')
  const { prefetchComponents, preloadComponents, preloadRouteComponents }: typeof import('../../node_modules/nuxt/dist/app/composables/preload')
  const { refreshCookie, useCookie }: typeof import('../../node_modules/nuxt/dist/app/composables/cookie')
  const { reloadNuxtApp }: typeof import('../../node_modules/nuxt/dist/app/composables/chunk')
  const { setInterval }: typeof import('../../node_modules/nuxt/dist/app/compat/interval')
  const { updateAppConfig, useAppConfig }: typeof import('../../node_modules/nuxt/dist/app/config')
  const { useAuth }: typeof import('../../../digital-agency/composables/useAuth')
  const { useCMS }: typeof import('../../../digital-agency/composables/useCMS')
  const { useFetch, useLazyFetch }: typeof import('../../node_modules/nuxt/dist/app/composables/fetch')
  const { useHydration }: typeof import('../../node_modules/nuxt/dist/app/composables/hydrate')
  const { useI18n }: typeof import('../../../digital-agency/composables/useI18n')
  const { useLoadingIndicator }: typeof import('../../node_modules/nuxt/dist/app/composables/loading-indicator')
  const { usePreviewMode }: typeof import('../../node_modules/nuxt/dist/app/composables/preview')
  const { useRequestURL }: typeof import('../../node_modules/nuxt/dist/app/composables/url')
  const { useRouteAnnouncer }: typeof import('../../node_modules/nuxt/dist/app/composables/route-announcer')
  const { useRuntimeHook }: typeof import('../../node_modules/nuxt/dist/app/composables/runtime-hook')
  const { useScript, useScriptClarity, useScriptCloudflareWebAnalytics, useScriptCrisp, useScriptEventPage, useScriptFathomAnalytics, useScriptGoogleAdsense, useScriptGoogleAnalytics, useScriptGoogleMaps, useScriptGoogleTagManager, useScriptHotjar, useScriptIntercom, useScriptLemonSqueezy, useScriptMatomoAnalytics, useScriptMetaPixel, useScriptNpm, useScriptPlausibleAnalytics, useScriptRybbitAnalytics, useScriptSegment, useScriptSnapchatPixel, useScriptStripe, useScriptTriggerConsent, useScriptTriggerElement, useScriptUmamiAnalytics, useScriptVimeoPlayer, useScriptXPixel, useScriptYouTubePlayer }: typeof import('../../node_modules/nuxt/dist/app/composables/script-stubs')
  const { useSiteSettings }: typeof import('../../../digital-agency/composables/useSiteSettings')
}
declare module 'vue' {
  interface ComponentCustomProperties extends UnwrapRefs<typeof _ComponentCustomProperties> {}
}