{"version":3,"file":"services-DQmMs7t4.js","sources":["../../../../../digital-agency/pages/agency-cms/manage/services.vue"],"sourcesContent":["<template>\n  <div class=\"min-h-screen bg-gray-50\">\n    <!-- Navigation -->\n    <nav class=\"bg-white shadow-sm border-b\">\n      <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div class=\"flex justify-between items-center py-4\">\n          <div class=\"flex items-center space-x-4\">\n            <NuxtLink to=\"/agency-cms/manage\" class=\"text-blue-600 hover:text-blue-500\">\n              <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\"></path>\n              </svg>\n            </NuxtLink>\n            <h1 class=\"text-xl font-semibold text-gray-900\">Manage Services</h1>\n          </div>\n          \n          <div class=\"flex items-center space-x-4\">\n            <button @click=\"openAddModal\" class=\"btn-primary\">Add Service</button>\n            <NuxtLink to=\"/agency-cms/services\" target=\"_blank\" class=\"btn-secondary\">View Live</NuxtLink>\n            <button @click=\"handleLogout\" class=\"btn-secondary\">Logout</button>\n          </div>\n        </div>\n      </div>\n    </nav>\n\n    <div class=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <!-- Loading State -->\n      <div v-if=\"loading\" class=\"flex justify-center items-center h-64\">\n        <div class=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n\n      <!-- Services List -->\n      <div v-else class=\"space-y-6\">\n        <div v-for=\"service in services\" :key=\"service.id\" class=\"card p-6\">\n          <div class=\"flex items-start justify-between\">\n            <div class=\"flex-1\">\n              <div class=\"flex items-center space-x-3 mb-3\">\n                <div \n                  class=\"w-4 h-4 rounded-full border-2 border-white shadow\"\n                  :style=\"{ backgroundColor: service.color || '#6495ed' }\"\n                ></div>\n                <h3 class=\"text-xl font-bold text-gray-900\">{{ service.title }}</h3>\n                <span v-if=\"!service.isActive\" class=\"px-2 py-1 bg-gray-200 text-gray-600 text-xs rounded-full\">Inactive</span>\n              </div>\n              \n              <p class=\"text-gray-600 mb-4\">{{ service.description }}</p>\n              \n              <div v-if=\"service.features?.length\" class=\"mb-4\">\n                <p class=\"text-sm font-medium text-gray-700 mb-2\">Features:</p>\n                <div class=\"flex flex-wrap gap-2\">\n                  <span \n                    v-for=\"feature in service.features\" \n                    :key=\"feature\"\n                    class=\"px-3 py-1 text-sm rounded-full text-white\"\n                    :style=\"{ backgroundColor: service.color || '#6495ed', opacity: 0.9 }\"\n                  >\n                    {{ feature }}\n                  </span>\n                </div>\n              </div>\n\n              <div class=\"flex items-center space-x-4 text-sm text-gray-500\">\n                <span>Order: {{ service.order }}</span>\n                <span>â€¢</span>\n                <span>Updated: {{ formatDate(service.updatedAt) }}</span>\n              </div>\n            </div>\n\n            <div class=\"flex items-center space-x-2 ml-4\">\n              <button \n                @click=\"editService(service)\"\n                class=\"p-2 text-blue-600 hover:bg-blue-50 rounded-lg\"\n              >\n                <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"></path>\n                </svg>\n              </button>\n              \n              <button \n                @click=\"toggleServiceStatus(service)\"\n                :class=\"service.isActive ? 'text-yellow-600 hover:bg-yellow-50' : 'text-green-600 hover:bg-green-50'\"\n                class=\"p-2 rounded-lg\"\n              >\n                <svg v-if=\"service.isActive\" class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L5.636 5.636\"></path>\n                </svg>\n                <svg v-else class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\n                </svg>\n              </button>\n              \n              <button \n                @click=\"deleteService(service)\"\n                class=\"p-2 text-red-600 hover:bg-red-50 rounded-lg\"\n              >\n                <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"></path>\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Empty State -->\n        <div v-if=\"services.length === 0\" class=\"text-center py-12\">\n          <svg class=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\n          </svg>\n          <h3 class=\"mt-2 text-sm font-medium text-gray-900\">No services</h3>\n          <p class=\"mt-1 text-sm text-gray-500\">Get started by creating your first service.</p>\n          <button @click=\"openAddModal\" class=\"btn-primary mt-4\">Add Service</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Service Modal -->\n    <div v-if=\"showModal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div class=\"bg-white rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        <div class=\"p-6\">\n          <div class=\"flex justify-between items-center mb-6\">\n            <h2 class=\"text-xl font-bold text-gray-900\">\n              {{ editingService ? 'Edit Service' : 'Add New Service' }}\n            </h2>\n            <button @click=\"closeModal\" class=\"text-gray-400 hover:text-gray-600\">\n              <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n              </svg>\n            </button>\n          </div>\n\n          <!-- Language Switcher -->\n          <div class=\"bg-gray-50 p-4 rounded-lg mb-6\">\n            <div class=\"flex items-center justify-between\">\n              <h3 class=\"text-sm font-medium text-gray-900\">Content Language</h3>\n              <div class=\"flex items-center bg-white rounded-lg p-1 border\">\n                <button \n                  @click=\"currentLanguage = 'en'\"\n                  type=\"button\"\n                  :class=\"currentLanguage === 'en' ? 'bg-blue-100 text-blue-600' : 'text-gray-600 hover:text-gray-900'\"\n                  class=\"px-3 py-1 rounded-md text-xs font-medium transition-colors\"\n                >\n                  ðŸ‡ºðŸ‡¸ EN\n                </button>\n                <button \n                  @click=\"currentLanguage = 'th'\"\n                  type=\"button\"\n                  :class=\"currentLanguage === 'th' ? 'bg-blue-100 text-blue-600' : 'text-gray-600 hover:text-gray-900'\"\n                  class=\"px-3 py-1 rounded-md text-xs font-medium transition-colors\"\n                >\n                  ðŸ‡¹ðŸ‡­ TH\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <form @submit.prevent=\"saveService\" class=\"space-y-6\">\n            <div class=\"relative\">\n              <input \n                v-model=\"serviceFormData.title[currentLanguage]\" \n                type=\"text\" \n                placeholder=\" \" \n                class=\"form-input peer\"\n                required\n              >\n              <label class=\"floating-label\">Service Title ({{ currentLanguage.toUpperCase() }})</label>\n            </div>\n\n            <div class=\"relative\">\n              <textarea \n                v-model=\"serviceFormData.description[currentLanguage]\" \n                placeholder=\" \" \n                rows=\"3\" \n                class=\"form-input resize-none peer\"\n                required\n              ></textarea>\n              <label class=\"floating-label\">Description ({{ currentLanguage.toUpperCase() }})</label>\n            </div>\n\n            <div class=\"relative\">\n              <input \n                v-model=\"serviceFormData.icon\" \n                type=\"text\" \n                placeholder=\" \" \n                class=\"form-input peer\"\n              >\n              <label class=\"floating-label\">Icon Name (e.g., search, social, code)</label>\n            </div>\n\n            <div>\n              <label class=\"form-label\">Service Image</label>\n              <ImageUpload \n                v-model=\"serviceFormData.image\" \n                label=\"Service Image (optional)\"\n                help-text=\"Optional image for the service. Will be displayed in service cards and details.\"\n              />\n            </div>\n\n            <!-- Color Picker -->\n            <div>\n              <label class=\"block text-sm font-medium text-gray-700 mb-2\">Card Color</label>\n              <div class=\"flex items-center space-x-4\">\n                <div class=\"relative\">\n                  <input \n                    v-model=\"serviceFormData.color\" \n                    type=\"color\" \n                    class=\"w-16 h-16 border-2 border-gray-300 rounded-lg cursor-pointer\"\n                  >\n                </div>\n                <div class=\"flex-1\">\n                  <input \n                    v-model=\"serviceFormData.color\" \n                    type=\"text\" \n                    placeholder=\"#6495ed\" \n                    class=\"form-input\"\n                    pattern=\"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\"\n                  >\n                  <p class=\"text-xs text-gray-500 mt-1\">This color will be used for the service card's accent color</p>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <label class=\"block text-sm font-medium text-gray-700 mb-2\">Features ({{ currentLanguage.toUpperCase() }})</label>\n              <div class=\"space-y-2\">\n                <div v-for=\"(feature, index) in serviceFormData.features\" :key=\"index\" class=\"flex space-x-2\">\n                  <input \n                    v-model=\"serviceFormData.features[index][currentLanguage]\" \n                    type=\"text\" \n                    class=\"form-input flex-1\"\n                    :placeholder=\"`Feature ${index + 1} (${currentLanguage.toUpperCase()})`\"\n                  >\n                  <button \n                    @click=\"removeFeature(index)\"\n                    type=\"button\"\n                    class=\"px-3 py-2 text-red-600 hover:bg-red-50 rounded-lg\"\n                  >\n                    <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"></path>\n                    </svg>\n                  </button>\n                </div>\n                <button \n                  @click=\"addFeature\"\n                  type=\"button\"\n                  class=\"w-full py-2 border-2 border-dashed border-gray-300 rounded-lg text-gray-500 hover:border-gray-400 hover:text-gray-600\"\n                >\n                  + Add Feature\n                </button>\n              </div>\n            </div>\n\n            <div class=\"grid grid-cols-2 gap-4\">\n              <div class=\"relative\">\n                <input \n                  v-model.number=\"serviceFormData.order\" \n                  type=\"number\" \n                  placeholder=\" \" \n                  class=\"form-input peer\"\n                  min=\"0\"\n                >\n                <label class=\"floating-label\">Display Order</label>\n              </div>\n\n              <div class=\"flex items-center space-x-3\">\n                <input \n                  v-model=\"serviceFormData.isActive\" \n                  type=\"checkbox\" \n                  id=\"isActive\"\n                  class=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                >\n                <label for=\"isActive\" class=\"text-sm font-medium text-gray-700\">Active</label>\n              </div>\n            </div>\n\n            <div class=\"flex justify-end space-x-4 pt-4 border-t\">\n              <button @click=\"closeModal\" type=\"button\" class=\"btn-secondary\">Cancel</button>\n              <button type=\"submit\" :disabled=\"saving\" class=\"btn-primary\">\n                {{ saving ? 'Saving...' : 'Save Service' }}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n\n    <!-- Success/Error Messages -->\n    <div v-if=\"successMessage\" class=\"fixed top-20 right-4 p-4 bg-green-50 border border-green-200 rounded-lg shadow-xl z-50\">\n      <div class=\"flex items-center\">\n        <svg class=\"w-5 h-5 text-green-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n        </svg>\n        <p class=\"text-green-700 font-medium\">{{ successMessage }}</p>\n      </div>\n    </div>\n\n    <div v-if=\"errorMessage\" class=\"fixed top-20 right-4 p-4 bg-red-50 border border-red-200 rounded-lg shadow-xl z-50\">\n      <div class=\"flex items-center\">\n        <svg class=\"w-5 h-5 text-red-400 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n        </svg>\n        <p class=\"text-red-700 font-medium\">{{ errorMessage }}</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { API_ENDPOINTS, buildApiUrl } from '~/constants/api'\n\ndefinePageMeta({\n  middleware: 'auth',\n  layout: false\n})\n\nconst { logout } = useAuth()\nconst { getSiteSettings } = useCMS()\nconst siteSettings = await getSiteSettings()\n\n// Data\nconst services = ref([])\nconst loading = ref(true)\nconst saving = ref(false)\nconst showModal = ref(false)\nconst editingService = ref(null)\nconst successMessage = ref('')\nconst errorMessage = ref('')\n\n// Language state for modal\nconst currentLanguage = ref('en')\n\n// Multi-language service form\nconst serviceFormData = reactive({\n  // Text fields as JSON {en: \"English\", th: \"Thai\"}\n  title: { en: '', th: '' },\n  description: { en: '', th: '' },\n  // Features array with multi-language support\n  features: [{ en: '', th: '' }],\n  // Language-neutral fields\n  icon: '',\n  image: '',\n  color: '#6495ed',\n  order: 0,\n  isActive: true\n})\n\n// Helper function to parse JSON with fallback\nconst parseJsonField = (jsonString, fallback) => {\n  try {\n    const parsed = JSON.parse(jsonString || '{}')\n    return typeof parsed === 'object' && parsed !== null ? parsed : fallback\n  } catch {\n    return fallback\n  }\n}\n\n// Methods\nonMounted(async () => {\n  await loadServices()\n})\n\nconst loadServices = async () => {\n  try {\n    // const { $fetch } = useNuxtApp()\n    const data = await $fetch(buildApiUrl(API_ENDPOINTS.CMS.SERVICES.GET))\n    // Ensure features are parsed as arrays (fallback parsing)\n    services.value = data.map(service => ({\n      ...service,\n      features: typeof service.features === 'string' \n        ? JSON.parse(service.features) \n        : Array.isArray(service.features) \n          ? service.features \n          : []\n    }))\n  } catch (error) {\n    errorMessage.value = 'Failed to load services'\n  } finally {\n    loading.value = false\n  }\n}\n\nconst openAddModal = () => {\n  editingService.value = null\n  resetForm()\n  showModal.value = true\n}\n\nconst editService = (service) => {\n  editingService.value = service\n  \n  // Parse multi-language fields\n  serviceFormData.title = parseJsonField(service.title, { en: '', th: '' })\n  serviceFormData.description = parseJsonField(service.description, { en: '', th: '' })\n  \n  // Parse features array\n  const features = typeof service.features === 'string' ? JSON.parse(service.features) : service.features\n  if (features.length > 0) {\n    serviceFormData.features = features.map(feature => \n      typeof feature === 'object' ? feature : { en: feature || '', th: '' }\n    )\n  } else {\n    serviceFormData.features = [{ en: '', th: '' }]\n  }\n  \n  // Language-neutral fields\n  serviceFormData.icon = service.icon || ''\n  serviceFormData.image = service.image || ''\n  serviceFormData.color = service.color || '#6495ed'\n  serviceFormData.order = service.order\n  serviceFormData.isActive = service.isActive\n  \n  currentLanguage.value = 'en'\n  showModal.value = true\n}\n\nconst closeModal = () => {\n  showModal.value = false\n  editingService.value = null\n  resetForm()\n}\n\nconst resetForm = () => {\n  serviceFormData.title = { en: '', th: '' }\n  serviceFormData.description = { en: '', th: '' }\n  serviceFormData.features = [{ en: '', th: '' }]\n  serviceFormData.icon = ''\n  serviceFormData.image = ''\n  serviceFormData.color = '#6495ed'\n  serviceFormData.order = 0\n  serviceFormData.isActive = true\n  currentLanguage.value = 'en'\n}\n\nconst addFeature = () => {\n  serviceFormData.features.push({ en: '', th: '' })\n}\n\nconst removeFeature = (index) => {\n  if (serviceFormData.features.length > 1) {\n    serviceFormData.features.splice(index, 1)\n  }\n}\n\nconst saveService = async () => {\n  saving.value = true\n  successMessage.value = ''\n  errorMessage.value = ''\n\n  try {\n    // Filter out empty features and prepare multi-language data\n    const filteredFeatures = serviceFormData.features.filter(feature => \n      feature.en.trim() || feature.th.trim()\n    )\n    \n    const serviceData = {\n      // Multi-language fields as JSON strings\n      title: JSON.stringify(serviceFormData.title),\n      description: JSON.stringify(serviceFormData.description),\n      features: JSON.stringify(filteredFeatures),\n      // Language-neutral fields\n      icon: serviceFormData.icon,\n      image: serviceFormData.image,\n      color: serviceFormData.color,\n      order: serviceFormData.order,\n      isActive: serviceFormData.isActive\n    }\n\n    if (editingService.value) {\n      await $fetch(buildApiUrl(API_ENDPOINTS.CMS.SERVICES.PUT(editingService.value.id)), {\n        method: 'PUT',\n        body: serviceData\n      })\n      successMessage.value = 'Service updated successfully!'\n    } else {\n      await $fetch(buildApiUrl(API_ENDPOINTS.CMS.SERVICES.POST), {\n        method: 'POST',\n        body: serviceData\n      })\n      successMessage.value = 'Service created successfully!'\n    }\n\n    closeModal()\n    await loadServices()\n  } catch (error) {\n    errorMessage.value = 'Failed to save service'\n  } finally {\n    saving.value = false\n  }\n}\n\nconst toggleServiceStatus = async (service) => {\n  try {\n    // const { $fetch } = useNuxtApp()\n    await $fetch(buildApiUrl(API_ENDPOINTS.CMS.SERVICES.PUT(service.id)), {\n      method: 'PUT',\n      body: {\n        ...service,\n        features: service.features,\n        isActive: !service.isActive\n      }\n    })\n    \n    successMessage.value = `Service ${service.isActive ? 'deactivated' : 'activated'} successfully!`\n    await loadServices()\n  } catch (error) {\n    errorMessage.value = 'Failed to update service status'\n  }\n}\n\nconst deleteService = async (service) => {\n  if (confirm(`Are you sure you want to delete \"${service.title}\"?`)) {\n    try {\n      // const { $fetch } = useNuxtApp()\n      await $fetch(buildApiUrl(API_ENDPOINTS.CMS.SERVICES.DELETE(service.id)), {\n        method: 'DELETE'\n      })\n      \n      successMessage.value = 'Service deleted successfully!'\n      await loadServices()\n    } catch (error) {\n      errorMessage.value = 'Failed to delete service'\n    }\n  }\n}\n\nconst formatDate = (dateString) => {\n  return new Date(dateString).toLocaleDateString()\n}\n\nconst handleLogout = async () => {\n  await logout()\n}\n\n// Clear messages after 5 seconds\nwatch([successMessage, errorMessage], () => {\n  if (successMessage.value || errorMessage.value) {\n    setTimeout(() => {\n      successMessage.value = ''\n      errorMessage.value = ''\n    }, 5000)\n  }\n})\n\n// SEO\nuseSeoMeta({\n  title: `Manage Services | ${siteSettings.siteName} CMS`,\n  robots: 'noindex, nofollow'\n})\n</script>"],"names":["_withAsyncContext","_ssrRenderAttrs","_mergeProps","_push","_parent","_createBlock","_createVNode","_unref","_ssrRenderList","_ssrRenderStyle","_ssrInterpolate","_ssrRenderClass","_ssrRenderAttr","_ssrIncludeBooleanAttr","_ssrLooseContain"],"mappings":"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"}