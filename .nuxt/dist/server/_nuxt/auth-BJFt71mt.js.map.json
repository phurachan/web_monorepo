{"file":"auth-BJFt71mt.js","mappings":";;;;;;;;;;;;AAIE,MAAA,OAAa,0BAAuB,OAAA,IAAA,SAAA;AAClC,MAAA,CAAA,GAAA,KAAA,WAAA,SAAA,GAAA;AACF;AAAA,EAGA;AAGU;;","names":[],"sources":["../../../../../digital-agency/middleware/auth.ts"],"sourcesContent":["import { API_ENDPOINTS, buildApiUrl } from '~/constants/api'\n\nexport default defineNuxtRouteMiddleware(async (to, from) => {\n  // Only protect /manage routes\n  if (!to.path.startsWith('/manage')) {\n    return\n  }\n\n  // Skip middleware on server side during SSR\n  if (import.meta.server) return\n\n  // Add a small delay to ensure cookies are properly set after login\n  if (from?.path === '/login') {\n    console.log('Coming from login page, adding delay for cookie propagation')\n    await new Promise(resolve => setTimeout(resolve, 100))\n  }\n\n  try {\n    // const { $fetch } = useNuxtApp()\n    console.log('Auth middleware: Checking authentication for path:', to.path)\n    \n    const response = await $fetch(buildApiUrl(API_ENDPOINTS.AUTH.ME))\n    \n    if (!response?.user) {\n      console.log('Auth middleware: No user found, redirecting to login')\n      return navigateTo('/login', { replace: true })\n    }\n\n    console.log('Auth middleware: User authenticated:', response.user.email)\n    \n    // Update the global auth state\n    const authState = useState('auth')\n    if (authState.value) {\n      authState.value.user = response.user\n      authState.value.isAuthenticated = true\n      authState.value.isLoading = false\n    }\n  } catch (error: any) {\n    console.log('Auth middleware: Auth check failed:', error.data?.message || error.message || error)\n    return navigateTo('/login', { replace: true })\n  }\n})"],"version":3}